#!/usr/bin/perl
#
# restore backedup files to AWS/S3|Glacier|Freezer or AZ/Hot|Cool|Archive
#                        or via rclone and on a local disk
#
# <- Last updated: Tue Apr  4 14:34:46 2023 -> SGK
#
# (c) 2021-2023 - Sylvain G. Korzennik, Smithsonian Institution
#
# ---------------------------------------------------------------------------
#
use strict;
## use File::Touch;
use Cwd;
#
my @w = split('/', $0);
my $SCRIPT = pop(@w);
#
local $main::USRBIN = '/usr/bin';
local $main::USRLOCALBIN = '/usr/local/bin';
local $main::VERNO  = '';

#
my $BINDIR = '.';
if ($#w >= 0) {
  $BINDIR = join('/', @w);
}
@INC = (@INC, $BINDIR);
#
require "parseArgs.pl";
require "utils.pl";
require "cloud.pl";
#
my %defOptions = (
  'CLOUD'        => 'aws:s3_glacier', # default cloud service to use
  'DRYRUN'       => 0,                # if set, will not donwload archives, but show what is needed
  'NOREMOVE'     => 0,                # if set, will not remove downloaded the archives
  #
  'ARCHLEN'      => '6',              # X value for X.Xd fmt for I used in archive-$I
  'SPLTLEN'      => '6',              # X value for --suffix-length=X in split
  'VERBOSE'      => 0,                # if set will echo more info
  'OUTDIR'       => '/tmp',           # where to restore the stuff
  'USEPERLRE'    => 0,                # use PERL RE, not shell RE * -> .* and ? -> .
  'NOCHOWN'      => 0,                # do not chown restored split files
  'NOCHGRP'      => 0,                # do not chgrp restored split files
   #
  'AWS'          => "aws",
  'AZCLI'        => "az-cli",
  'AZ_ANAME'     => 'azbackup',
  'RCLONE'       => "rclone",
   #
  'SCRATCH'      => '/scratch/backup', 
  'RCFILE'       => $ENV{HOME}.'/.dobackuprc',
  #
  'VERSION'      => '0.99/6 (Apr  3 2023)',
    );
#
#
# ---------------------------------------------------------------------------
# 
# read a config file
# ------------------
my %defOpts = %defOptions;
# ignore these
my %ignOpts = (
  'BASEDIR'      => '',      
  'COMPRESS'     => '',      
  'INCEDIRS'     => '',           
  'KEEPTARLISTS' => '',           
  'LABEL'        => '',     
  'LEVEL'        => '',           
  'LIMIT_TO'     => '',          
  'MAXCOUNT'     => '',      
  'MAXSIZE'      => '',        
  'NOREMOVE'     => '',           
  'NOUPLOAD'     => '',           
  'NTHREADS'     => '',          
  'SCANWITH'     => '',       
  'EXTRASLEEP'   => '',           
  'SORTBY'       => '',      
  'RCMDATASET'   => '',           
  'UPLOAD_NPASS' => '',           
  'UPLOAD_STIME' => '',          
  'TAR_CF_OPTS'  => '',  
  'TAG_HOST'     => '',         
  'TAG_AUTHOR'   => '',         
);
ReadConfig($SCRIPT, \@ARGV, \%defOpts, \%ignOpts);
#
my @clouds = qw/aws:glacier 
 aws:s3_glacier aws:s3_freezer aws:s3_standard 
 az:archive az:cool az:hot 
 ^rclone: ^ldisk:/;
#
my @LISTOPTS = ( 
  '',
  "-usage: $SCRIPT [options]",
  '-    where options are',
  '',
  'use-cloud=list('.join(',',@clouds).') ; CLOUD       cloud service to use,               def.: '.$defOpts{CLOUD},
  'use-vault=string                      ; VAULT       vault name {bkup|frzr}-label-xxx-yyyymmdd-hhmm-lx',
  'scratch=directory                     ; VALUE       scratch directory,                  def.: '.$defOpts{SCRATCH},
  'out-dir=directory                     ; OUTDIR      directory where to restore          def.: '.$defOpts{OUTDIR},
  '',
  'use-dir=string                        ; USEDIR      set directory for showing or restoring files',
  '                                      ;               can be a RE when showing files,',
  '                                      ;               but must be exact when restoring files',
  '',
  'no-remove                             ;             do not remove the archives',
  'no-chown                              ;             do not chown restored split files (when root)',
  'no-chgrp                              ;             do not chgrp restored split files',
  'use-perl-re                           ;             use PERL style RE for file specifications', 
  '',
  'rcconfig-file=file                    ; FILENAME    configuration filename,             def.: '.$defOpts{RCFILE},
  'n|dry-run                             ;             dry run: find the files and list the archives',
  'v|verbose=repeat                     ;             verbose',
  'p|parse-only                          ;             parse the args and check them only',
  'h|help                                ;             show this help (ignore any remaining arguments)',
  '',
  ' and one of the following actions:',
  'show-dirs                             ;             show directories',
  'show-files                            ;             show files saved under USEDIR',
  'restore-files=string                  ; FILES       restore the list of files (quoted) in USEDIR',
  'clean-scratch                         ;             remove archives downloaded to scratch',
  '',
  '-Ver. '.$defOpts{VERSION});

#
# add options mapping when var name is not upper case(option) w/out all the '-'
my @MAPOPTS = (
  '--config-file:RCFILE',
  '--tag:TAG_DATE',
  '--use-cloud:CLOUD',
  '--use-vault:USETHISVAULT',
  );
#
my @help = ();
#
# parse the options
# -----------------
my %opts = &ParseArgs($SCRIPT, \@ARGV, \%defOpts, \@LISTOPTS, \@MAPOPTS, \@help);
#
# show help and exit if -h|--help -> $opts{HELP}
# ---------------------------------------------
if (defined $opts{HELP} ) {
  print join("\n", @help),"\n";
  exit(0);
}
# Validate Opts
# --------------
&ValidateRestoreOpts($SCRIPT, \%opts);
#
# echo options
# ------------
if ($opts{VERBOSE}) {
  foreach my $key (sort(keys(%opts))) {
    printf STDERR "%12s = %s\n", $key, $opts{$key};
  } 
}
#
# ran into an error -> exit
# ----------------
if ($opts{STATUS}) { 
  my $s = ''; if ($opts{NERRORS} > 1 ) { $s = 's'; }
  print STDERR "$SCRIPT: exiting b/c of $opts{NERRORS} error$s.\n";
  exit(1); 
}
#
# parse args only -> exit
# ---------------
if ($opts{PARSEONLY} != 0) { 
  print STDERR "$SCRIPT --parse-only: exiting.\n";
  exit(0); 
}
#
# add vault name to scratch
$opts{SCRATCH} .= $opts{VAULT}.'/';
#
# execute requested actions
# ------------------------------------------------------------------------
my $startTime = time();
#
my $now = Now();
print STDERR "+ $now $SCRIPT started\n";
#
my $status = 1;
$opts{NERRORS} = 0;
if      ($opts{SHOWDIRS})  {
  #
  $status = &ShowDirsList(\%opts);
  #
} elsif ($opts{SHOWFILES}) {
  #
  $status = &ShowFilesList(\%opts);
  #
} elsif ($opts{RESTOREFILES})  {
  #
  $status = &RestoreFiles(\%opts);
  #
#} elsif ($opts{SHOWARCHIVES}) {
#  #
#  $status = &ShowArchList(\%opts);
#  #
 } elsif ($opts{CLEANSCRATCH})   {
  #
  $status = &CleanScratch(\%opts);
  #
} else {
  print STDERR "$SCRIPT: internal error #0\n";
}
# print how long it took  and exit
# ----
my $elapsedTime = ElapsedTime($startTime);
my $now = Now();
#
if ($status) {
  print STDERR "= $now $SCRIPT $opts{ACTION} failed - $elapsedTime\n";
} else {
  my $xtra = '';
  if ($opts{DRYRUN}) { $xtra = ' --dry-run'; }
  my $s = &AddS($opts{NERRORS});
  print STDERR "= $now $SCRIPT $opts{ACTION}$xtra done, $opts{NERRORS} error$s - $elapsedTime\n";
}
exit($status);
#
# ---------------------------------------------------------------------------
#
sub ShowDirsList {
  #
  # show the list of directories saved in a vault, all args in %opts
  #
  my %opts = %{$_[0]};
  my $status = 1;
  #
  if ($opts{VERBOSE}) {
    print STDERR "$SCRIPT: ShowDirsList()\n";
    print STDERR "  vault:   $opts{VAULT}\n";
    print STDERR "  cloud:   $opts{CLOUD}\n";
  }
  #
  # fetch the archives list if not found in scratch
  #
  my $msg;
  my $archivesListFile = $opts{SCRATCH}.'archivesList.txt';
  if (! -e $archivesListFile) {
    #
    # make sure the scratch dir exists
    if (! -d $opts{SCRATCH}) {
      if ($opts{VERBOSE}) {
        print STDERR "$SCRIPT: ShowDirsList() creating $opts{SCRATCH}\n";
      }
      $status = MkDir($opts{SCRATCH}, $SCRIPT);
      if ($status) { return $status; }
    }
    #
    # check if the vault exists
    print STDERR "$SCRIPT: ShowDirsList() checking for vault=$opts{VAULT}, cloud=$opts{CLOUD}\n";
    $status = checkForVault(%opts);
    if ($status) { return $status; }
    #
    # download the main archives list
    my $file = "$opts{VAULT}/archivesList.txt";
    my $dest = $opts{SCRATCH};
    print STDERR "$SCRIPT: ShowDirsList() downloading the archives list\n   vault: $opts{VAULT}\n   cloud: $opts{CLOUD}\n";
    $status = DownloadFromCloud($SCRIPT, $file, $dest, \*STDERR, \%opts);
    if ($status) { return $status; }
    #
    $msg = ", cloud=$opts{CLOUD}";
  } else {
    #
    print STDERR "$SCRIPT: ShowDirsList() using the archives list in $opts{SCRATCH}\n";
    #
  }
  #
  # read the archive list
  #
  if ($opts{VERBOSE} > 1) { print STDERR "$SCRIPT: ShowDirsList() reading $archivesListFile\n"; }
  #
  my @names = GetDirsList($archivesListFile);
  #
  foreach my $name (@names) {
    printf "  %s\n", $name;
  }
  #
  my $n = $#names + 1;
  my $y = 'y'; if ($n > 1) { $y = 'ies'; }
  print STDERR "$SCRIPT: ShowDirsList() $n director$y saved in vault=$opts{VAULT}$msg\n";
  #
  $status = 0;
  return $status;
}
#
# ---------------------------------------------------------------------------
#
sub GetDirsList {
  #
  # read the archive list, no filtering
  #
  my $archivesListFile = shift();
  my %infos = ReadArchivesList($archivesListFile, '', 'infos.tgz$');
  my @names = sort(keys(%infos));
  return @names;
}
#
# ---------------------------------------------------------------------------
#
#sub ShowArchsList {
#  $status = 1;
#  return $status;
#}
#
# ---------------------------------------------------------------------------
#
sub ShowFilesList {
  #
  # show which files are saved in a directory, all args in %opts
  #
  my %opts = %{$_[0]};
  my $status = 1;
  #
  # add '/' to dir
  if ($opts{USEDIR} !~ /\/$/) { $opts{USEDIR} .= '/' };
  #
  if ($opts{VERBOSE}) {
    print STDERR "$SCRIPT: ShowFilesList()\n";
    print STDERR "  vault:   $opts{VAULT}\n";
    print STDERR "  cloud:   $opts{CLOUD}\n";
    print STDERR "    dir:   $opts{USEDIR}\n";
  }
  #
  my $archivesListFile = $opts{SCRATCH}.'archivesList.txt';
  $status = &CheckForArchivesListFile($archivesListFile, \%opts);
  if ($status) { return $status; }
  #
  # convert '$dir' to perl RE
  #
  my $dir;
  if ($opts{USEPERLRE}) {
    $dir = $opts{USEDIR};
  } else {
    $dir = ConvertRE($opts{USEDIR});
  }
  #
  # read the archives list
  #
  my %infos = &ReadArchivesList($archivesListFile, $dir, 'infos.tgz$');
  my @dirList = sort(keys(%infos));
  my $n = $#dirList + 1;
  #
  if ($n == 0) {
    print STDERR "$SCRIPT: ShowFilesList() no directory matching '$opts{USEDIR}' found\n";
    return $status;
  }
  #
  # loop on matching dirs
  #
  my $s = ''; if ($n > 1) { $s = 'es'; }
  print STDERR "$SCRIPT: ShowFilesList() $n match$s for '$opts{USEDIR}' in the archives list\n";
  #
  my $nFilesTot = 0;
  my $nSplitTot = 0;
  #
  # loop on dir to check for findList.txt (and infos.tgz)
  #
  foreach my $dir (@dirList) {
    #
    my $sdir = $opts{SCRATCH}.$dir;  
    #
    #
    # do we have the findList.txt
    #
    if (! -e $sdir.'findList.txt') {
      #
      my $infosSetTgz = $dir.'infos.tgz';
      if (! -e $opts{SCRATCH}.'/'.$infosSetTgz) {
        #
        print STDERR "$SCRIPT: ShowFilesList() downloading infos set for '$dir'\n";
        #
        my $file = "$opts{VAULT}/$infosSetTgz";
        my $dest =  $opts{SCRATCH}.$dir;
        $status = DownloadFromCloud($SCRIPT, $file, $dest, \*STDERR, \%opts);
        if ($status) { return $status; }
      }
      #
      print STDERR "$SCRIPT: ShowFilesList() extracting files list for '$dir'\n";
      #
      # need to break dir in head and tail b/c of the way the infos.tgz is written
      #
      my @w    = split('/', $dir);
      my $dirExtn = pop(@w);
      my $dirBase = join('/', @w);
      #
      my $tarFile     = $dirExtn.'/infos.tgz';
      my $extractList = $dirExtn.'/findList.txt';
      my $cdTo        = $opts{SCRATCH}.$dirBase;
      #
      $status = ExtractListFromTarSet($tarFile, $extractList, $cdTo, \%opts);
      if ($status) { return $status; }
    }
    #
  }
  #
  # loop on dir to show content
  #
  foreach my $dir (@dirList) {
    printf "==> %s <==\n", $dir;
    #
    my $sdir = $opts{SCRATCH}.$dir;  
    #
    #
    # read the findList - does not reflect what might not have been saved, tho.
    #
    my %findListInfos = &ParseFindList($sdir);
    my @files = sort ( keys(%findListInfos) );
    my $nFiles = $#files+1;
    my $nSplit = 0;
    my $nParts = 0;
    my $nArchs = 0;
    #
    foreach my $file ( @files ) {
      #
      my $infos = $findListInfos{$file};
      #
      my @w = split(' ', $infos);
      #
      my @times              = split('/', $w[0]);
      my ($sizx, $sparseFtr) = split('/', $w[1]);
      my ($usr,  $grp)       = split('/', $w[2]);
      my ($mode, $typ)       = split('/', $w[3]);
      my ($set,  $parts)     = split('/', $w[4]);
      #
      my $size = &FmtSize($sizx);
      my $mstr = &ConvertMode($mode);
      # which time to show: modify as in %A@/%T@/%C@ == atime, mtime, ctime
      #                                   or %C@/%T@ == ctime,  mtime
      my $tstr = &ConvertTime($times[1]);
      #
      my $pstr;
      if ($parts > 0) {
        $pstr = sprintf("%3d/%-3d", $set, $parts);
      } else {
        $pstr = sprintf("%3d    ", $set);
      }
      printf "%s %s/%s %s %s %s %s\n", $mstr, $usr, $grp, $size, $tstr, $pstr, $file;
      #
      if ($set   > $nArchs) { $nArchs = $set; }
      if ($parts >       0) { $nSplit++; $nParts += $parts; }
    }
    #
    $nArchs += 1+$nParts-$nSplit;
    #
    $nFilesTot += $nFiles;
    $nSplitTot += $nSplit;
    my @s = ('','','');
    if ($nFiles > 1) { $s[0] = 's'; }
    if ($nArchs > 1) { $s[1] = 's'; }
    if ($nParts > 1) { $s[2] = 's'; }
    print STDERR "$SCRIPT: ShowFilesList() $nFiles file$s[0] ".
        "($nArchs archive$s[1]), $nSplit splitted ($nParts part$s[2]) for $dir\n";
  }
  #
  if ($#dirList > 0) {
    $s = &AddS($nFilesTot);
    print STDERR "\n";
    print STDERR "$SCRIPT: ShowFilesList() $nFilesTot file$s, $nSplitTot splitted in $opts{USEDIR}\n";
  }
  return 0;
  #
}
#
# ---------------------------------------------------------------------------
#
sub RestoreFiles {
  #
  # restore files, all args in %opts
  #
  my %opts = %{$_[0]};
  my $status = 1;
  #
  my $dir = $opts{USEDIR};
  if ($dir !~ /\/$/) { $dir .= '/' };
  my $sdir = $opts{SCRATCH}.$dir;
  #
  my $outdir = $opts{OUTDIR};
  if ($outdir !~ /\/$/) { $outdir .= '/' };
  #
  if ($opts{VERBOSE}) {
    print STDERR "$SCRIPT: RestoreFiles()\n";
    print STDERR "  vault:   $opts{VAULT}\n";
    print STDERR "  cloud:   $opts{CLOUD}\n";
    print STDERR "  archdir: $dir\n";
    print STDERR "  scatch:  $sdir\n";
    print STDERR "  outdir:  $outdir\n";
    print STDERR "  file(s): $opts{RESTOREFILES}\n";
  }
  #
  # read the archivesList.txt
  #
  my $archivesListFile = $opts{SCRATCH}.'archivesList.txt';
  $status = &CheckForArchivesListFile($archivesListFile, \%opts);
  if ($status) { return $status; }
  #
  my %archInfos = &ReadArchivesList($archivesListFile, '', '');
  my @archList = keys(%archInfos);
  #
  my $infosSet = $sdir.'infos.tgz';
  #
  # convert $dir to PERL RE
  my $xdir = $dir;
  if ($opts{USEPERLRE} == 0) {
    $xdir = ConvertRE($dir);
  }
  #
  ## could convert xdir to a real dir using GetDirsList()
  ## my @names = GetDirsList($archivesListFile);
  ## print STDERR " grep(/$xdir/, @archList)\n";
  #
  my @m = grep(/$xdir/, @archList);
  #
  if (! -e $infosSet) {
   if ($opts{VERBOSE}) {
     print STDERR "$SCRIPT: ${sdir}infos.tgz not found\n";
   }   
   if ($#m >= 0) {
     print STDERR "run '$SCRIPT --show-files $dir' first\n";
   } else {
     print STDERR "$SCRIPT: '$dir' not found in vault=$opts{VAULT}, cloud=$opts{CLOUD}\n";
     print STDERR "  run '$SCRIPT --show-dirs' to get the list\n";
   }
   return 1;
  }
  #
  # build the list of RE/files to restore
  #
  my @filex = split(' ', $opts{RESTOREFILES});
  my @files = ();
  #
  # read the list from a file if specified as' @filename' 
  foreach my $file (@filex) {
    if ($file =~ /^@/) {
      $file =~ s/.//;
      if (-e $file) {        
        my @content = GetFileContent($file);
        @files = (@files, @content);
      } else {
        print STDERR "$SCRIPT: RestoreFiles() file '$file' not found\n";
        return 1;
      }
    } else {
      @files = (@files, $file);
    }
  }
  #
  # convert @files list to PERL RE and escape [.+] (shell RE), unless --use-perl-re
  #
  @filex = @files;
  @files = ();
  #
  foreach my $file (@filex) {
    #
    my $xfile;
    if ($opts{USEPERLRE}) {
      $xfile  = $file;
    } else {
      $xfile  = ConvertRE($file);
    }
    $xfile  = $dir.$xfile;
    @files = (@files, $xfile);
  }
  #
  # get the findList info
  #
  my %findListInfos = &ParseFindList($sdir);
  my @lines = keys(%findListInfos);
  #
  my %archNeeded = ();
  my %archSets   = ();
  #
  # loop on the files
  #
  foreach my $file (@files) {
    #
    # check if $file is a match
    #
    my @match = grep(/$file$/, @lines);
    my $n = $#match + 1;
    #
    if ($n > 0) {
      #
      #
      foreach my $match (@match) {
        my $infos = $findListInfos{$match};
        my @w = split(' ', $infos);
        # my ($set,  $parts) = split('/', $w[4]);
        my $setInfo = $w[4];
        $archNeeded{$setInfo}++;
        $archSets{$match} = $setInfo
      }
    }
  }
  # 
  my @allMatch   = sort(keys(%archSets  ));
  my @archNeeded = sort(keys(%archNeeded));
  my $nTot  = $#allMatch+1;
  my $nArch = $#archNeeded+1;
  #
  if ($nTot == 0) {
    print STDERR "$SCRIPT: RestoreFiles() file specification '$opts{RESTOREFILES}' lead to $nTot file to restore\n";
    return 0;
  }
  #
  my $aa = 'archive is'; 
  if ( $nArch > 1 ) { $aa = 'archives are'; }
  my $s = &AddS($nTot);
  print STDERR "$SCRIPT: RestoreFiles() $nArch $aa needed to restore $nTot file$s\n";
  #
  # created the ouput directory if needed
  #
  if (! -d $outdir) {
    #
    print STDERR "$SCRIPT: creating $outdir\n";
    #
    $status = MkDir($outdir, $SCRIPT);
    if ($status) { return $status; }
  }
  #
  # loop on the needed archive list
  #
  foreach my $setInfo (@archNeeded) {
    #
    my ($set, $parts) = split('/', $setInfo);
    #
    #
    # loop on the file list to make the list for this set
    #
    my @files = ();
    foreach my $file (@allMatch) {
      if ($archSets{$file} eq $setInfo) {
        @files = (@files, $file);
      }
    }
    #
    # check if have downloaded the archives
    #
    my $i;
    my $ix = $parts; if ($parts == 0) { $ix++; }
    #
    my @parts = ();
    my $nMissing = 0;
    for ($i = 0; $i < $ix; $i++) {
      #
      my $archName;
      my $archFmt = '%'.sprintf('%d.%d', $opts{ARCHLEN}, $opts{ARCHLEN}).'d';
      my $spltFmt = '%'.sprintf('%d.%d', $opts{SPLTLEN}, $opts{SPLTLEN}).'d';
      #
      if ($parts == 0) {
        $archName = sprintf('archive-'.$archFmt, $set);
      } else {
        $archName = sprintf('archive-'.$archFmt.'.'.$spltFmt.'.splt', $set, $i);
      }
      my @match = grep(/^$dir$archName/, @archList);
      #
      my $n = $#match +1;
      if ($n!= 1) {
        print STDERR "$SCRIPT: RestoreFiles() - internal error - arch name match = $n not 1\n";
        ## print STDERR ">> /^$dir$archName/\n  >", join("<\n  >",@archList),"<\n";
        return 1;
      }
      $archName = $match[0];
      #
      @parts = (@parts, $opts{SCRATCH}.$archName);
      #
      my $size = $archInfos{$archName};   
      #
      if ($opts{VERBOSE}) {
        print STDERR "RestoreFiles() archive needed:\n";
        print STDERR "  archive: $archName\n";
        print STDERR "  size:    $size\n";
      }
      if (! -e $opts{SCRATCH}.$archName) {
        #
        # this needs the archList for this dir
        #
        if ($opts{DRYRUN}) {
          #
          my $xtra = '';
          if ($parts > 0) { $xtra = "/$i"; }
          print STDERR "$SCRIPT: RestoreFiles() need to download archive #$set$xtra for\n";
          $nMissing++;
          #
          #if ($opts{VERBOSE}) {
          #  print STDERR "  archive: $archName\n";
          #  print STDERR "  size:    $size\n";
          #}
          if ($i+1 == $ix) {
            print STDERR "    ".join("\n    ", @files),"\n";
          }
          #
        } else { 
          #
          my $xtra = '';
          if ($parts > 0) { $xtra = "/$i"; }
          print STDERR "$SCRIPT: RestoreFiles() downloading archive #$set$xtra ($size)\n";
          if ($opts{VERBOSE}) {
            print STDERR "  archive: $archName\n";
            print STDERR "  size:    $size\n";
          }
          #
          my $file = "$opts{VAULT}/$archName";
          my $dest = $sdir;
          $status = DownloadFromCloud($SCRIPT, $file, $dest, \*STDERR, \%opts);
          if ($status) { return $status; }
          #
        }
      }
    }
    #
    # return here if dry run
    #
    if ($opts{DRYRUN}) { 
      my $msg = "all already";
      if ($nMissing > 0) {
        my $archiveNeed = 'archive still needs';
        if ( $nMissing > 1 ) { $archiveNeed = 'archives still need'; }
        $msg = "$nMissing $archiveNeed to be";
      }
      print STDERR "$SCRIPT: RestoreFiles() $msg downloaded\n";
      return 0; 
    }
    #
    # now extract or concat
    #
    my $n;
    my $s;
    my $cmd;
    #
    # ls -d -l, but what abt - ??
    my $ls = $main::USRBIN.'/ls -d'; if ($opts{VERBOSE}) { $ls .= ' -l'; }
    #
    if ($parts == 0) {
      #
      # extract @files from $archName
      #
      my $archName = $parts[0];
      #
      my $listFn = "/tmp/list.$$";
      open(LIST, ">$listFn");
      print LIST join("\n", @files), "\n";
      close(LIST);
      #
      $n = $#files+1;
      $s = &AddS($n);
      if ($opts{VERBOSE} > 1) {
        print STDERR "$SCRIPT: RestoreFiles() extracting $n file$s from $archName\n";
      }
      #
      my $extractList = "--files-from=$listFn";
      my $tarFile     = $opts{SCRATCH}.$archName;
      my $tarFile     = $archName;
      my $cdTo        = $outdir;
      #
      $status = ExtractListFromTarSet($tarFile, $extractList, $cdTo, \%opts);
      unlink($listFn);
      if ($status) { $opts{NERRORS}++; }
      # 
      print STDERR "$SCRIPT: RestoreFiles() $n file$s restored under $outdir\n";
      #
      $cmd = "cd $outdir; ";
      $cmd .= "$ls ".join(' ', @files);
      $status = ExecuteCmd($cmd, $opts{VERBOSE}, \*STDOUT);
      if ($status) { $opts{NERRORS}++; }
      #
      #
    } else {
      #
      # contact @files from archNames
      #     
      my $n = $#files+1;
      if ($n != 1) {
        print STDERR "$SCRIPT: RestoreFiles() - internal error - no of files = $n not 1\n";
        return 1;
      }
      #
      # $#files+1, " file from $parts parts\n";
      #
      my $file = $files[0];
      my $xtra;
      if ($opts{VERBOSE}) { $xtra = " under $outdir\n"; }
      print STDERR "$SCRIPT: RestoreFiles() assembling the $parts parts of $file$xtra\n";
      #
      # select which code to assemble based on extention
      my %codes = ('splt' => $main::USRBIN.'/cat',
                   'gz'   => $main::USRBIN.'/gunzip -c',
                   'lz4'  => $main::USRBIN.'/lz4 -c',
                   'bz2'  => $main::USRBIN.'/bunzip2 -c',
                   'Z'    => $main::USRBIN.'/uncompress -c',
                   'lzma' => $main::USRLOCALBIN.'/lzcat');
      my @w = split('\.', $parts[0]);
      my $ext = pop(@w);
      # this should not happen, tho
      if (! defined $codes{$ext}) {
        die "doRestore: RestoreFile() cannot concat *.'$ext' files\n";
      }
      my $cat = $codes{$ext};
      my $cmd = "cd $outdir; $cat ".join(' ', @parts)." > $file";
      $status = ExecuteCmd($cmd, $opts{VERBOSE}, \*STDERR);
      if ($status) { return $status; }
      #
      # need to touch/chown/chmod the file
      #
      my ($timeInfo, $sizeInfo, $ownerInfo, $permInfo, $partInfo) = split(' ', $findListInfos{$file});
      # ctime,  mtime -> atime, mtime, ctime
      # ctime cannot be changed by touch
      my @times = split('/', $timeInfo);
      my $modTime = $times[1];
      my $accTime = $times[1];
      if ($#times == 2 ) { $accTime = $times[0]; } 
      my ($user, $group)      = split('/', $ownerInfo);
      my ($perm, $type)       = split('/', $permInfo);
      #
      $modTime = &FmtTime($modTime);
      $accTime = &FmtTime($accTime);
      #
      my $ffile = "$outdir/$file";
      #
      # could use PERL's version via File::Touch
      $cmd  = "$main::USRBIN/touch -m -t $modTime $ffile; ";
      $cmd .= "$main::USRBIN/touch -a -t $accTime $ffile; ";
      $cmd .= "$main::USRBIN/chmod 0$perm         $ffile;";
##    chmod '0'.$perm, $ffile;
      #
      # must be root to chown
      # to use PERL's chown $uid, $gid, $ffile; # uid/gid must be numeric
      # run as regular user the chgrp can fail
      # and when restoring to a different machine, either chown or chgrp can fail
      #
      my $id = $<;
      if ($id == 0) {
        if ($opts{NOCHOWN} == 0) {
          $cmd .= "$main::USRBIN/chown $user.$group $ffile; ";
        }
      } else {
        if ($opts{NOCHGRP} == 0) {
          $cmd .= "$main::USRBIN/chgrp $group       $ffile; ";
        }
      }
      #
      $status = ExecuteCmd($cmd, $opts{VERBOSE}, \*STDERR);
      # !! do not exit on error here !!?
      # if ($status) { return $status; }
      #
      print STDERR "$SCRIPT: RestoreFiles() $n file$s restored under $outdir\n";
      #
      $cmd = "cd $outdir; ";
      $cmd .= "$ls ".join(' ', @files);
      $status = ExecuteCmd($cmd, $opts{VERBOSE}, \*STDOUT);
      if ($status) { return $status; }
      #
    }
    #
    # deleting the archive
    #
    my $msg = '';
    $s = ''; 
    if ($parts > 1) { $s = 's'; $msg ="($parts parts) "; }
    if ($opts{NOREMOVE}) {
      $msg .= "not deleted";
      if ($opts{VERBOSE}) { 
        foreach my $archName (@parts) {
          my $size = $archInfos{$archName};   
          $msg .= " ($archName, $size)"; 
        }
      }
    } else {
      $msg .= "deleted";
      unlink(@parts);
    }
    print STDERR "$SCRIPT: RestoreFiles() archive$s #$set $msg\n"; 
    #
  }
  #
  my $s = &AddS($nTot);
  #
  if ($opts{DRYRUN}) {
    print STDERR "$SCRIPT: RestoreFiles() $nTot file$s would have been restored\n";
  } else {
    print STDERR "$SCRIPT: RestoreFiles() $nTot file$s restored\n";
  }
  #
  return 0;
}
#
# ---------------------------------------------------------------------------
#
sub CleanScratch {
  #
  # remove downloaded archives in scratch that may have not been dowloaded
  # still missing
  #
  my %opts = %{$_[0]};
  my $status = 1;
  #
  if ($opts{VERBOSE}) {
    print STDERR "$SCRIPT: CleanScratch()\n";
    print STDERR "  vault:   $opts{VAULT}\n";
    print STDERR "  scratch: $opts{SCRATCH}\n";
  }
  #
  if (! -d $opts{SCRATCH}) {
    print STDERR "$SCRIPT: CleanScratch() invalid --use-vault and --scratch combo\n";
    if ($opts{VERBOSE}) {
      print STDERR "$SCRIPT: CleanScratch() directory '$opts{SCRATCH}' not found, or not a directory\n";
    }
    return $status;
  }
  #
  my $listFile = "/tmp/list.$$";
  my $cmd = $main::USRBIN."/find $opts{SCRATCH} -name 'archive*tgz'";
  $cmd .= " > $listFile";
  #
  my $status = ExecuteCmd($cmd, $opts{VERBOSE}, \*STDERR);
  my @list = GetFileContent($listFile);
  unlink($listFile);
  #
  if ($status) { 
    print STDERR "$SCRIPT: CleanScratch() '$cmd' failed\n";
    return $status; 
  }
  #
  my $n = $#list+1;
  my $s = ''; if ($n > 1) { $s = 's'; }
  if ($n == 0) {
    #
    print STDERR "$SCRIPT: CleanScratch() no archive found under $opts{SCRATCH}\n";
    #
  } else {
    #
    if ($opts{DRYRUN}) {
      #
      print STDERR "$SCRIPT: CleanScratch() would delete $n archive$s\n";
      #
      if ($opts{VERBOSE}) {
        print STDERR '  ', join("\n  ", @list), "\n";
      }
      #
    } else {
      #
      print STDERR "$SCRIPT: CleanScratch() deleting $n archive$s under $opts{SCRATCH}\n";
      if ($opts{VERBOSE}) {
        print STDERR '  ', join("\n  ", @list), "\n";
      }
      my $nDel = unlink(@list);
      if ($nDel != $n) {
        print STDERR "$SCRIPT: CleanScratch() only $nDel deleted\n";
      }
      #
    }
  }
  #
  $status = 0;
  return $status;
}
#
# ---------------------------------------------------------------------------
#
sub CheckForArchivesListFile {
  #
  # check for archivesList.txt 
  #   $status = &CheckForArchivesListFile($archivesListFile, \%opts);
  #
  my $archivesListFile = $_[0];
  my %opts = %{$_[1]};
  my $status = 1;
  #
  #  archives list must bel in $archivesListFile
  #
  if (! -e $archivesListFile) {
    if ($opts{VERBOSE}) {
      print STDERR "$SCRIPT: archives list file not found ($archivesListFile)\n";
    }
    print STDERR "$SCRIPT: run 'doRestore --show-dirs' first\n";
  } else {
    #
    $status = 0;
    #
    # echo if verbose
    if ($opts{VERBOSE}) {
      print STDERR "$SCRIPT: archives list found ($archivesListFile)\n";
    }
  }
  return $status;
}
#
# ---------------------------------------------------------------------------
#
sub ReadArchivesList {
  #
  # read the arhciveList, return %infos 
  #  %infos = ReadArchivesList($archivesListFile, $filter, $required);
  # read the file, grep /${filter}$required/, and set $infos{$file} = $size
  #
  my $archivesListFile = shift();
  my $filter   = shift();
  my $required = shift();
  #
  my %infos = ();
  #
  # read the archive list - 1st line might be VERNO if starts with #%backup
  my @filesList = GetFileContent($archivesListFile);
  if ($filesList[0] =~ /^#%backup/) {
    $main::VERNO = shift(@filesList);
  }
  #
  # grep '/${filter}$required/'
  #
  my @infosList = @filesList;
  if ("/${filter}$required/" ne "//") {
    @infosList = grep(/${filter}$required/, @filesList);
  }
  #
  # parse
  foreach my $info (@infosList) {
    # info: size name
    my ($size, $name) = split(' ', $info, 2);
    if ($required) {
      $name =~ s/$required//;
    }
    $infos{$name} = $size;
  }
  return %infos;
}
#
# ---------------------------------------------------------------------------
#
sub ExtractListFromTarSet {
  #
  # extract a list of files from a tar set
  #   $status = ExtractListFromTarSet($tarFile, $list, $cdTo, \%opts);
  # $list can be --files-from=file to use a file as the list
  #
  my $tarFile =   shift();
  my $list    =   shift();
  my $cdTo    =   shift();
  my %opts    = %{shift()};
  #
  my $tarOpts = '-x';
  # add p to preserve permission
  $tarOpts .= ' -p';
  #
  # use extn to figure out the compression
  my @w = split('\.', $tarFile);
  my $extn = pop(@w);
     if ($extn eq 'lz4')  { $tarOpts .= " --use-compress-program=$main::USRBIN/lz4"; }
  elsif ($extn eq 'bz2')  { $tarOpts .= " --bzip2"; }
  elsif ($extn eq 'Z')    { $tarOpts .= " --compress"; }
  elsif ($extn eq 'lzma') { $tarOpts .= " --use-compress-program=$main::USRLOCALBIN/lzma"; }
  #
  if ($opts{VERBOSE} > 1) { $tarOpts .= ' -v'; }
  #
  $tarOpts .= ' -f';
  my $tarxf = $main::USRBIN.'/tar '.$tarOpts;
  #
  my $cmd = "cd $cdTo; $tarxf $tarFile $list";
  # print ">> $cmd\n";
  my $status = ExecuteCmd($cmd, $opts{VERBOSE}, \*STDERR);
  return $status;
}
#
# ---------------------------------------------------------------------------
#
sub ParseFindList {
  #
  # read and parse the findList.txt file, returns $infos == $infos{$file}
  #   %findListInfos = &ParseFindList($dir);
  # where info is times sizeInfo usr/grp perm/type set#[/#parts]'
  # old version was ctime,  mtime -> atime, mtime, ctime
  #
  my $dir = shift();
  my %infos = ();
  #
  my $fileName = $dir.'findList.txt';
  if ($opts{VERBOSE} > 1) { print STDERR "$SCRIPT: ShowFilesList() reading $fileName\n"; }
  #
  open(FILE, '<'.$fileName) || die "$SCRIPT: ParseFindList() $fileName not found\n";
  #
  my $line;
  my $file;
  my @w;
  #
  my $n = 0;
  #
  while ($line = <FILE>) {
    chomp($line);
    if ($line =~ /^#%backup/) {
      $main::VERNO = $line;
    } else {
      @w = split(' ', $line, 6);
      $file = pop(@w);
      $infos{$file} = join(' ', @w);
      $n++;
    }
  }
  close(FILE);
  #
  if ($opts{VERBOSE} > 1) { print STDERR "$SCRIPT: ShowFilesList() $n file(s) listed\n"; }
  #
  return %infos;
}      
#
# ---------------------------------------------------------------------------
#
sub ConvertRE {
  #
  # convert shell RE to perl RE - mist likely incomplete
  #
  my $reIn = shift();
  my @l = split(//, $reIn);
  my $l;
  my $reOut;
  #
  foreach $l ( @l ) {
    if    ($l eq '?') { $l = '.';   }
    elsif ($l eq '.') { $l = '\.';  }
    elsif ($l eq '+') { $l = '\+';  }
    elsif ($l eq '*') { $l = '.*';  }
    $reOut .= $l;
  }
  # print STDERR ">> $reIn -> $reOut\n";
  return $reOut;
}
#
# ---------------------------------------------------------------------------
#
sub ConvertMode {
  #
  # convert $mode to string
  # do not do a full job (sticky bit, etc...)
  #
  my $mode = sprintf("%3.3d", shift());
  #
  my $mstr = '-';
  foreach my $v (split('', $mode)) {
    if ($v == 0){ $mstr .= '---'; } else {
      if ($v % 8) { $mstr .= 'r'; } else { $mstr .= '-'; }
      if ($v % 4) { $mstr .= 'w'; } else { $mstr .= '-'; }
      if ($v % 2) { $mstr .= 'x'; } else { $mstr .= '-'; }
    }
  }
  # print STDERR ">> $mode -> $mstr\n";
  return $mstr
}
#
# ---------------------------------------------------------------------------
#
sub ConvertTime {
  #
  # convert unix time to YYYY-MM-DD hh:mm string
  #
  my $time = shift();
  #
  my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime($time);      
  my $tstr = sprintf("%d-%2.2d-%2.2d %2.2d:%2.2d", $year+1900, $mon+1, $mday, $hour, $min);
  #
  return $tstr;
}
#
# ---------------------------------------------------------------------------
#
sub AddS {
  if ($_[0] > 1) { return 's'; } else { return ''; }
}
