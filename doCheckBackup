#!/usr/bin/perl -w
#
# <- Last updated: Fri Apr 14 16:09:27 2023 -> SGK
#
#  stand alone checkBackup()
#
# (c) 2021-2023 - Sylvain G. Korzennik, Smithsonian Institution
#
use strict;
#
my @w = split('/', $0);
my $SCRIPT = pop(@w);
my $BINDIR = join('/', @w);
#
@INC = (@INC, $BINDIR);
#
local %main::unxCmd = (
  'cp'         => '/usr/bin/cp',
  'df'         => '/usr/bin/df',
  'find'       => '/usr/bin/find',
  'tar'        => '/usr/bin/tar',
  'split'      => '/usr/bin/split',
  'gzip'       => '/usr/bin/gzip',
  'gunzip'     => '/usr/bin/gunzip',
  'lz4'        => '/usr/bin/lz4',
  'compress'   => '/usr/bin/compress',
  'uncompress' => '/usr/bin/uncompress',
  'bzip2'      => '/usr/bin/bzip2',
  'bunzip2'    => '/usr/bin/bunzip2',
  'lzma'       => '/usr/local/bin/lzma',
  'lzcat'      => '/usr/local/bin/lzcat',
  'cat'        => '/usr/bin/cat',
  'chmod'      => '/usr/bin/chmod',
  'chown'      => '/usr/bin/chown',
  'chgrp'      => '/usr/bin/chgrp',
  'ln'         => '/usr/bin/ln',
  'ls'         => '/usr/bin/ls',
  'touch'      => '/usr/bin/touch',
  'xcp'        => '/root/bin/xcp',
    );
#
require "checkBackup.pl";
require "utils.pl";
require "parseArgs.pl";
#
my %defOptions = (
  'CLOUD'     => 'aws:s3_glacier',
  'SCRATCH'   => '/pool/admin/hpc/glacier',
  'BASEDIR'   => 'home',
  'LABEL'     => 'hydra',
  'OUTDIR'    => '/tmp',
  'VERBOSE'   => 0,
  'RCFILE'    => $ENV{HOME}.'/.dobackuprc',
  'VERSION'   => '0.99/5 (Apr 14 2023)'
    );
my %ignOptions = (
   #
  'COMPRESS'     => '-', 
  'DRYRUN'       =>  0,  
  'INCEDIRS'     =>  0,
  'KEEPALLLOGS'  =>  0,  
  'KEEPTARLISTS' =>  0,  
  'LEVEL'        =>  0,  
  'LIMIT_TO'     => '',  
  'MAXCOUNT'     => '-', 
  'MAXSIZE'      => '-', 
  'NOREMOVE'     =>  0,  
  'NOUPLOAD'     =>  0,  
  'NTHREADS'     =>  0,  
  'SCANWITH'     => '-', 
  'EXTRASLEEP'   =>  0,
  'SORTBY'       => '-', 
  'ARCHLEN'      =>  0,
  'SPLTLEN'      =>  0, 
  'VERBOSE'      =>  0,  
  'UPLOAD_NPASS' =>  0,  
  'UPLOAD_STIME' =>  0,  
  'TAR_CF_OPTS'  => '-', 
  'TAG_HOST'     => '-', 
  'TAG_AUTHOR'   => '-', 
  'AWS'          => '-',
  'AZCLI'        => '-',
  'AZ_ANAME'     => '-',
  'RCLONE'       => '-',
  #
    );
#
my %defOpts = %defOptions;
ReadConfig($SCRIPT, \@ARGV, \%defOpts, \%ignOptions, \%main::unxCmd);
#
# my @HELP = ('', 'doCheckBackup [options]', 
#             '',
#             '  --tag       TAG    required',
#             '  --scratch   VALUE  def.: '.$defOpts{SCRATCH},
#             '  --base-dir  VALUE  def.: '.$defOpts{BASEDIR},
#             '  --label     LABEL  def.: '.$defOpts{LABEL},
#             '  --out-dir   DIR    def.: '.$defOpts{OUTDIR},
#             '  --verbose', 
#             '',
#    );
# my %opts = &ParseArgs($SCRIPT, \@ARGV, \%defOpts, \@HELP);
#
my @LISTOPTS = ( 
  '',
  "-usage: $SCRIPT [options]",
  '-    where options are',
  '',
  'tag=string         ; TAG    required',
  'scratch=directory  ; VALUE  def.: '.$defOpts{SCRATCH},
  'base-dir=directory ; VALUE  def.: '.$defOpts{BASEDIR},
  'label=string       ; LABEL  def.: '.$defOpts{LABEL},
  'out-dir=directory  ; DIR    def.: '.$defOpts{OUTDIR},
  'v|verbose=repeat   ;        verbose',
  'h|help             ;        show this help (ignore any remaining arguments)',
  '',
  '-Ver. '.$defOpts{VERSION});
#
# add options mapping when var name is not upper case(option) w/out all the '-'
my @MAPOPTS = (
  '--config-file:RCFILE',
  '--tag:TAG_DATE',
  '--use-cloud:CLOUD',
  '--use-vault:USETHISVAULT',
  );
#
my @help = ();
my %opts = &ParseArgs($SCRIPT, \@ARGV, \%defOpts, \@LISTOPTS, \@MAPOPTS, \@help);
#
# show help and exit if -h|--help -> $opts{HELP}
# ---------------------------------------------
if (defined $opts{HELP} ) {
  print join("\n", @help),"\n";
  exit(0);
}
&ValidateBackupOpts($SCRIPT, \%opts);
# get rid of pesky warning
my %junk = %main::unxCmd;
#
# ran into an error -> exit
# ----------------
if ($opts{STATUS} != 0) { 
  print STDERR "$SCRIPT: exiting b/c of error(s).\n";
  exit(1); 
}
#
$opts{BASEDIR}   =~ s/^\///;
$opts{INVENTORY} = $opts{OUTDIR}.'/inventoryList.txt';
#
if (! defined $opts{VAULT}) {
  my $VHDR;
  if ($opts{CLOUD} eq 'aws:s3_freezer') { $VHDR = 'frzr'; } else { $VHDR = 'bkup'; }
  # convert to lower case and replace complement of [a-z] [0-9] to '-' 
  my $VNAME = lc($opts{LABEL}.'-'.$opts{BASEDIR});
  $VNAME =~ s/[^a-z0-9]/-/g;
  $opts{VAULT} = sprintf("%s-%.35s-%s", $VHDR, $VNAME, $opts{TAG_DATE});
}
#
if ($opts{VERBOSE}) {
  foreach my $key (sort(keys(%opts))) {
    if ($opts{$key} ne '') {
      printf STDERR " %14s = %s\n", $key, $opts{$key};
    }
  }
  printf STDERR "\n";
}
#
checkBackup($SCRIPT, %opts);
#
